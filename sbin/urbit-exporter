#!/usr/bin/env python3
#
# On Debian-ish:
#
#     sudo apt install python3-prometheus-client python3-urllib3
#

import argparse
import inspect
import os.path
import prometheus_client
import re
import sys
import time
import urllib3

UPDATE_PERIOD_SEC = 5

def main():
    """
    Prometheus exporter for an Urbit process.

    Takes a port to bind, and either an Urbit HTTP port to query or
    an Urbit pier directory. In the latter case, it reads the Urbit
    instance's HTTP port out of the pier's .http.ports file.

    The bound port is the port to pass when configuring the prometheus
    instance, e.g.:

        urbit-exporter 12345 sampel-palnet --http 8080

    would correspond to a prometheus.yml entry like:

        - job_name: urbit
          static_configs:
            - targets: ['localhost:12345']

    The following metrics are exported:

    * urbit_up: 1 iff the ship seems to be up; measured by presence of
      .http.ports if applicable, and/or by 200 response from the login
      page.

    * urbit_us: 1 iff the ship name appears on the login page.

    * urbit_fe: 1 iff the ship name appears on the login page from the
      passed frontend URL base. Only exported if --fe is passed.
    """

    pp = argparse.ArgumentParser(
        description=inspect.cleandoc(main.__doc__),
        formatter_class=argparse.RawDescriptionHelpFormatter)
    pp.add_argument('port', type=int, help='Port to start exporter server on.')
    pp.add_argument('ship', type=str, help='Urbit ship name.')
    pp.add_argument('--fe', type=str,
                    help='Frontend URL base (e.g. "https://ship.my.net".)')
    pq = pp.add_mutually_exclusive_group()
    pq.add_argument('--http', type=int,
                    help='Urbit instance http port to query.')
    pq.add_argument('--pier', type=str,
                    help='Urbit pier directory to read http port from.')
    args = pp.parse_args()
    if not any((args.fe, args.http, args.pier)):
        pp.error('One of --fe, --http, or --pier must be passed.')

    URBIT_UP = prometheus_client.Gauge('urbit_up',
                                       'Urbit login page loads',
                                       ['ship'])
    if args.http or args.pier:
        URBIT_US = prometheus_client.Gauge('urbit_us',
                                           'Urbit ship is on login page',
                                           ['ship'])
    else:
        URBIT_NO_US = prometheus_client.Gauge('urbit_no_us', 'no urbit_us',
                                              ['ship'])
        URBIT_NO_US.labels(ship=args.ship).set(1)
    if args.fe:
        URBIT_FE = prometheus_client.Gauge('urbit_fe',
                                           'Urbit ship is on frontend',
                                           ['ship'])
    else:
        URBIT_NO_FE = prometheus_client.Gauge('urbit_no_fe', 'no urbit_fe',
                                              ['ship'])
        URBIT_NO_FE.labels(ship=args.ship).set(1)

    ship_re = re.compile(re.escape(b'~' + bytes(args.ship, encoding='ascii')))

    if args.pier:
        ports_path = os.path.join(args.pier, '.http.ports')

    def get_port():
        ret = None
        if args.pier:
            with open(ports_path, 'r') as f:
                for line in f.readlines():
                    ret, _, typ = line.split(' ')
                    if typ == 'public':
                        break
        return ret or args.http

    urllib3.disable_warnings()
    http = urllib3.PoolManager()
    def scrape_http(url_base, up_checks):
        url = url_base + '/~/login'
        try:
            resp = http.request('GET', url, redirect=False, retries=False)
            for gauge, check in up_checks:
                gauge.labels(ship=args.ship).set(1 if check(resp) else 0)
        except urllib3.exceptions.HTTPError as e:
            print('GET {}: {}'.format(url, e), file=sys.stderr)
            for gauge, _ in up_checks:
                gauge.labels(ship=args.ship).set(0)

    prometheus_client.start_http_server(args.port)
    while True:
        try:
            urbit_port = get_port()
        except FileNotFoundError:
            urbit_port = None
            URBIT_UP.labels(ship=args.ship).set(0)
        if urbit_port is not None:
            up_checks = [
                (URBIT_UP, lambda r: 200 == r.status),
                (URBIT_US, lambda r: ship_re.search(r.data))
            ]
            scrape_http('http://127.0.0.1:{}'.format(urbit_port), up_checks)
        if args.fe:
            up_checks = [(URBIT_FE, lambda r: ship_re.search(r.data))]
            if urbit_port is None:          # get urbit_up from fe
                up_checks.append((URBIT_UP, lambda r: 200 == r.status))
            scrape_http(args.fe, up_checks)
        time.sleep(UPDATE_PERIOD_SEC)

if __name__ == '__main__':
    main()
